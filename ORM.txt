ORM
===

- Model.save()
    * save() does not call full_clean(). Model.objects.create() also the same.

- bulk_create(), bulk_update()
    クエリの削減に貢献する。ただし、いくつかの制限がある。
- get_or_create(), get_or_update()

- examples
```
# filtering
>>> from courses.models import *
>>> Course.objects.exclude(subject__in=('Python', 'Java'))
<QuerySet [<Course: Python Basics>, <Course: Python Collections>, <Course: Object-Oriented Python>, <Course: Python Testing>, <Course: Build a Simple Android App>, <Course: Android Activity Lifecycle>, <Course: SQL Basics>, <Course: Modifying Data with SQL>, <Course: jQuery Basics>, <Course: Build a Simple Dynamic Site with Node.js>, <Course: Build a Basic PHP Website>]>
>>> python = Course.objects.filter(title__icontains='python')
>>> for course in python:
...     course.subject = 'Python'
...     course.save()
...
>>> Course.objects.exclude(subject__in=('Python', 'Java'))
<QuerySet [<Course: Build a Simple Android App>, <Course: Android Activity Lifecycle>, <Course: SQL Basics>, <Course: Modifying Data with SQL>, <Course: jQuery Basics>, <Course: Build a Simple Dynamic Site with Node.js>, <Course: Build a Basic PHP Website>]>
>>>

# projection
>>> Course.objects.filter(subject__icontains='javascript')
<QuerySet [<Course: jQuery Basics>, <Course: Build a Simple Dynamic Site with Node.js>]>
>>> Course.objects.filter(subject__icontains='javascript').values('id', 'title', )
<QuerySet [{'id': 16, 'title': 'jQuery Basics'}, {'id': 17, 'title': 'Build a Simple Dynamic Site with Node.js'}]>
>>> Course.objects.filter(subject__icontains='javascript').values_list('id', 'title', )
<QuerySet [(16, 'jQuery Basics'), (17, 'Build a Simple Dynamic Site with Node.js')]>
>>>

# Limit and Offset
>>> Course.objects.all()[2:5]
<QuerySet [<Course: Object-Oriented Python>, <Course: Python Testing>, <Course: Customizing Django Templates>]>
>>> Course.objects.all()[:3]
<QuerySet [<Course: Python Basics>, <Course: Python Collections>, <Course: Object-Oriented Python>]>
>>> Course.objects.all()[12:]
<QuerySet [<Course: Java Objects>, <Course: Java Data Structures>, <Course: Build a Basic PHP Website>]>

# datetime
>>> Course.objects.datetimes('created_at', 'year')
<QuerySet [datetime.datetime(2016, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>), datetime.datetime(2018, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)]>
>>> Course.objects.datetimes('created_at', 'month')
<QuerySet [datetime.datetime(2016, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>), datetime.datetime(2018, 4, 1, 0, 0, tzinfo=<DstTzInfo 'Asia/Tokyo' JST+9:00:00 STD>)]>
>>>


# F
>>> from courses.models import *
>>> from django.db.models import F
>>> quiz = Quiz.objects.latest('id')
>>> quiz.times_taken += 1
>>> quiz.times_taken
>>> quiz.save()
1
>>> quiz.times_taken = F('times_taken') + 1
>>> quiz.save()
>>> quiz.times_taken
<CombinedExpression: F(times_taken) + Value(1)>
>>> quiz.refresh_from_db()
>>> quiz.times_taken
2
>>> quizzes = Quiz.objects.all().update(times_taken=F('times_taken')+1)
>>> quiz.times_taken
2
>>> quiz.refresh_from_db()
>>> quiz.times_taken
3
>>>
```
